/*

Lets first start with the Brick class. 
In java, a rectangle can be made with 4 parameters. 
Its constructor is Rectangle(x coordinate of top left corner, y coordinate of top left corner, height, width).
In order to make bricks with lives, I made a new object called a Brick, which is a subclass of Rectangle.
This brick has everything a regular rectangle has except with a int life variable. 
I also added a new constructor that just adds the new lives variable:
Brick(x coordinate of top left corner, y coordinate of top left corner, height, width, lives.).

--------------------------------------------------------------------------------------------------
Now we go to the BrickShooter class which has everything else.
After the comments, the imports, and the "public class BrickShooter extends JPanel implements KeyListener, ActionListener, Runnable {",
you'll find a bunch of variables. 
  Variables: 
  - screenWidth: Preferrably a multiple of 300 due to the following variables that derive from screenWidth.  Minimum is 300 and Maximum is 6000.
  - screenHeight: Always 2/3 of the screenHeight.
  - right and left: Used for movement of the gun. If right is true, paddle goes right. A right/left keypress will make this true and a key release will put it back to false. 
  - gunWidth: Always 1/10 of the screenWidth.
  - gunHeight: Always 1/5 of the gunWidth.
  - gunX: Initial starting x coordinate of the gun's top left corner. (screenWidth / 2) is the center x value of the screen. This will then be moved to the left by (gunWidth / 2). 
  - gunY: The y coordinate of the gun's top left corner. Moved up by gunHeight from the bottom of the screen. 
  - brickWidth: All brick widths are 1/15 of the screenWidth. There will always be 15 bricks in each row. 
  - brickHeight: Always 2/3 of the brickWidth.
  - brickX and brickY: The coordinates of the first brick. 
  - bulletSize: Used for both height and width of the bullet.
  - Gun: A rectangle with values determined earlier.
  - Bricks: An array of bricks. Should contain a multiple of 15 bricks. 
  - Bullet: An array of Rectangles. The number is the maximum number of shots possible at once. 
  - brickFellDown and bricksOver: Win and Loss conditions. If one is true, the game will end. 
  - shotCount: Number of bullets shot. Used to make new bullets in the array "Bullet".
  - count: Number of broken bricks. If this number hits the number of original bricks, bricksOver becomes true and the game ends.
  - dropCount: Starts off at zero. Increases by "dropCountRate" for every frame (every time the run method loops). When this number hits 1200, it will reset back to 0.
  - dropCountRate: The rate at which dropCount increases. Changes with the number keys 1~5. Defined by the screenHeight. 
  - status: Tells the player about the game state. "Win" or "Lose".
  - pause: If true, the game is paused. The game will start out paused. When this is paused is true, the while loop inside the run method will not run. Toggled with the shift key. 
  - poweredUp: If true, bullets move 2 times faster. Toggles with the P key. 
  - gameStarted: Starts out false. When the game is unpaused once, gameStarted becomes true. 
  - controls: Starts out false. If true during a paused game, controls will appear. Toggles with the C key. 
  - backgroundImageLoss: Imported image for the background. Only appears when you lose. You must have the image on your desktop. 
  
Now we have the initializeVariables() method. This method will reset all the variables that must be reset for the restart. 
  - Gun.x: This is the x variable of the Gun Rectangle we made earlier. The only thing that changes with the gun is the x coordinate so it's all we have to reset. 
  - brickX and brickY: Reset both to 0 in order to be able create bricks with the same starting coordinate. 
  - Bricks: We make a new array with the same number of Bricks.
  - Bullet: We make a new array with the same number of Rectangles.
  - brickFellDown and bricksOver: Win and Loss conditions are reset to false.
  - count: Count of broken bricks reset to 0.
  - dropCountRate: Reset to level 1.
  - pause: When game is reset, game will be paused.
  - gameStarted: Goes back to starting screen. 
  Note: initializing any other variables is unnecessary as they either don't change at all or will be redefined during the gameplay.
  
getImage() will import images from the given locations.
  - try: Tries to import from given location.
  - /Users/masakiosato/Desktop/pepe.jpg: Path of the image location.
  - backgroundImageLoss: Sets the pepe.jpg image to this variable.
  - catch: Anticipates for error.
  - System.out.println("Couldn't get backround image"): Prints error message in console if image couldn't be imported.

The main() method will import all the details for the game.
  - BrickShooter game = new BrickShooter(): Makes a new BrickShooter game called game. 
  - JFrame frame = new JFrame(): Makes a JFrame called frame.
  - game.getImage(): runs the getImage() method.
  - frame.setSize(screenWidth,screenHeight+22): Sets frame size based on the screenWidth and screenHeight variables. The +22 anticipates the window's top tab.
  - frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE): Program ends when you close the window. 
  - frame.add(game): Imports game into the frame.
  - frame.setResizable(false): Makes the game unresizeable.
  - frame.setLocationRelativeTo(null): Sets window into the center of the screen.
  - game.addKeyListener(game): Adds a KeyListener for to the game. 
  - frame.setVisible(true): Idk.
  - game.setFocusable(true): Idk.
	- Thread t = new Thread(game): Idk.
	- t.start(): Idk.
  
Paint() runs whenever the repaint() method is called. It's called many times in the run() method.
  - if (!brickFellDown && !bricksOver) : A giant if statement. If the game is not over, then paint everything in this method:
    - g.setColor(Color.DARK_GRAY); g.fillRect(0, 0, screenWidth, screenHeight): Makes a giant dark gray rectangle that covers the whole window. 
    - for (int i = 50; i < screenWidth; i += 50) : Paints a grid with lines 50 pixels apart.
    - g.setColor(Color.green); g.fillRect(Gun.x, Gun.y, Gun.width, Gun.height): Paints a rectangle based on the coordinates and dimensions of the gun.
    - for (int i = 0; i < Bricks.length; i++): for loop for every brick in the Bricks array.
      - if (Bricks[i] != null): If the brick exists
        - if (Bricks[i].lives == 3) g.setColor(Color.red): If the brick has 3 lives, choose the red color.
				- else if (Bricks[i].lives == 2) g.setColor(Color.blue): If the brick has 2 lives, choose the blue color.
				- else g.setColor(Color.green) For all other bricks, choose the green color.
        - g.fillRect(Bricks[i].x + 1, Bricks[i].y + 1, Bricks[i].width - 1, Bricks[i].height - 1): Paints a rectangle with the dimensions of the specific brick. each brick has 1 pixel cut off from it's edges.
        Note: A brick can only have a maximum of 3 lives.  If a brick has 0 lives, the brick will = null so the previous if statement wouldn't happen.
    - g.setColor(Color.red); for (int i = 0; i < Bullet.length; i++): For each bullet,
      - if (Bullet[i] != null) g.fillOval(Bullet[i].x, Bullet[i].y, Bullet[i].width, Bullet[i].height): If the bullet exists, paint an oval with the given coordinates and dimensions.
    - if (pause): If the game is paused,
      - g.setColor(new Color(255, 255, 255, 175)): Sets the color to white with an opacity of 175 out of 255.
  		- g.fillRect(0, 0, screenWidth, screenHeight): Draws a rectangle that covers the whole screen with the previous color.
      - g.setColor(Color.BLACK): Sets color to black for the upcoming text.
      - if (controls): If controls is toggled true,
        - g.drawString("Controls: ", 70, 70);
				- g.drawString("Left and Right: Move gun side to side.", 70, 100);
			  - g.drawString("Up: Shoot bullet.", 70, 130);
				- g.drawString("Shift: Pause/Unpause game.", 70, 160);
				- g.drawString("Enter: Restart game.", 70, 190);
				- g.drawString("P: Power up toggle (Ball speeds up).", 70, 220);
				- g.drawString("1~5: Level Selection.", 70, 250);
				- g.drawString("Press C to go back.", 70, 280);
      - else : If controls is toggled false,
        - level: A string variable that prints out the current level that the player is playing.
        - if (gameStarted): If the game has already started, 
          - g.drawString("Paused", 70, 70);
		  		- g.drawString("Press shift to continue.", 70, 100);
        - else : If the game hasn't started already, show the intro/opening text
          - g.drawString("Brick Shooter", 70, 70);
					- g.drawString("Press shift to begin.", 70, 100);
        - g.drawString("Press C for controls.", 70, 130): Prompts user to check controls.
				- g.drawString(level, 70, 16): Prints out current level.
  - else: If the game is over, don't paint everything up there and paint everything in here instead.
    - g.setColor(Color.WHITE): Sets color to white.
		- if (bricksOver) g.fillRect(0, 0, screenWidth, screenHeight): If you win(bricksOver is true), paint a giant white rectangle that covers the whole screen.
		- else if (brickFellDown) g.drawImage(backgroundImageLoss, 0, 0, screenWidth, screenHeight, this): If you lose(brickFellDown is true), put in the image to cover the whole screen.
		- g.setColor(Color.BLUE): Sets color to blue.
		- g.drawString(status, 70, 100): Prints out game status.
		- g.drawString("Press enter to play again.", 70, 130): Prompts user to press enter to play again.

The run() method is where all the legit action happens. Each round represents 1 call on the run() method.
  - createBricks(): The program runs through this part just once. Whenever the game is restarted, the restart method has its own createBricks().
  - while (true): The first while loop. Because the loop condition is always true, this loop will go on forever.
    - while (!pause): While the game is not paused, 
      - dropCount += dropCountRate: For every loop, the dropCount increases by dropCountRate.
      - if (dropCount >= 1200): If dropCount passes 1200, 
        - dropCount = 0: dropCount resets
				- for (int i = 0; i < Bricks.length; i++): For every brick in the Bricks array.
          - if (Bricks[i] != null): If the brick exists, 
            - Bricks[i].y++: The y coordinate of the Brick increases by 1, dropping the brick by 1 pixel.
      - for(int i = 0; i < Bullet.length; i++): For each bullet in the Bullet array,
        - if (Bullet[i] != null): If the bullet exists,
          - if (poweredUp) Bullet[i].y -= screenHeight / 100: If powered up is toggled true, the bullet moves up by a 
          - else Bullet[i].y -= screenHeight/200;
				  - if (Bullet[i].y <= 0) Bullet[i] = null;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
